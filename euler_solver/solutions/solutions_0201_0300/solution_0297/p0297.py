#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Project Euler Problem 297: Zeckendorf Representation.

Problem Statement:
    Each new term in the Fibonacci sequence is generated by adding the previous
    two terms. Starting with 1 and 2, the first 10 terms are:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89.

    Every positive integer can be uniquely written as a sum of nonconsecutive
    terms of the Fibonacci sequence. For example, 100 = 3 + 8 + 89. Such a sum
    is called the Zeckendorf representation of the number.

    For any integer n > 0, let z(n) be the number of terms in the Zeckendorf
    representation of n. Thus, z(5) = 1, z(14) = 2, z(100) = 3, etc. Also, for
    0 < n < 10^6, sum z(n) = 7894453.

    Find sum z(n) for 0 < n < 10^17.

URL: https://projecteuler.net/problem=297
"""
from typing import Any

euler_problem: int = 297
framework_version: str = "0.0.1"
test_cases: list[dict[str, Any]] = [
    {'category': 'dev', 'input': {'max_limit': 100}, 'answer': None},
    {'category': 'main', 'input': {'max_limit': 100000000000000000}, 'answer': None},
    {'category': 'extra', 'input': {'max_limit': 1000000000000000000}, 'answer': None},
]
encrypted: str = (
    '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'
    '6OFYuq9Ui8qNXvxsk0NeiPaMom4='
)

if __name__ == '__main__':
    from euler_solver.framework import evaluate, logger
    logger.setLevel('ERROR')
    raise SystemExit(evaluate(euler_problem=euler_problem, time_out_in_seconds=300))

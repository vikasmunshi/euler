#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Project Euler Problem 101: Optimum Polynomial.

Problem Statement:
    If we are presented with the first k terms of a sequence it is impossible to
    say with certainty the value of the next term, as there are infinitely many
    polynomial functions that can model the sequence.

    As an example, let us consider the sequence of cube numbers. This is defined
    by the generating function, u_n = n^3: 1, 8, 27, 64, 125, 216, ...

    Suppose we were only given the first two terms of this sequence. Working on
    the principle that "simple is best" we should assume a linear relationship
    and predict the next term to be 15 (common difference 7). Even if we were
    presented with the first three terms, by the same principle of simplicity,
    a quadratic relationship should be assumed.

    We shall define OP(k, n) to be the nth term of the optimum polynomial generating
    function for the first k terms of a sequence. It should be clear that OP(k, n)
    will accurately generate the terms of the sequence for n <= k, and potentially
    the first incorrect term (FIT) will be OP(k, k+1); in which case we shall call
    it a bad OP (BOP).

    As a basis, if we were only given the first term of sequence, it would be most
    sensible to assume constancy; that is, for n >= 2, OP(1, n) = u_1.

    Hence we obtain the following OPs for the cubic sequence:

        OP(1, n) = 1             -> 1, 1, 1, 1, ...
        OP(2, n) = 7n - 6        -> 1, 8, 15, ...
        OP(3, n) = 6n^2 - 11n + 6 -> 1, 8, 27, 58, ...
        OP(4, n) = n^3           -> 1, 8, 27, 64, 125, ...

    Clearly no BOPs exist for k >= 4.

    By considering the sum of FITs generated by the BOPs (indicated in red above),
    we obtain 1 + 15 + 58 = 74.

    Consider the following tenth degree polynomial generating function:
        u_n = 1 - n + n^2 - n^3 + n^4 - n^5 + n^6 - n^7 + n^8 - n^9 + n^10.

    Find the sum of FITs for the BOPs.

URL: https://projecteuler.net/problem=101
"""
from typing import Any

euler_problem: int = 101
framework_version: str = "0.0.1"
test_cases: list[dict[str, Any]] = [
    {'category': 'dev', 'input': {'polynomial_coefficients': [0, 0, 0, 1]},
     'answer': None},
    {'category': 'main', 'input': {'polynomial_coefficients': [1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1]},
     'answer': None},
]
encrypted: str = (
    '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'
    'By4yxJdKQBM='
)

if __name__ == '__main__':
    from euler_solver.framework import evaluate, logger
    logger.setLevel('ERROR')
    raise SystemExit(evaluate(euler_problem=euler_problem, time_out_in_seconds=300))

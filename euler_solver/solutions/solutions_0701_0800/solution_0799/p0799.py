#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Project Euler Problem 799: Pentagonal Puzzle.

Problem Statement:
    Pentagonal numbers are generated by the formula: P_n = 1/2 * n * (3n - 1)
    giving the sequence:
    1, 5, 12, 22, 35, 51, 70, 92, ...

    Some pentagonal numbers can be expressed as the sum of two other pentagonal numbers.
    For example:
    P_8 = 92 = 22 + 70 = P_4 + P_7

    3577 is the smallest pentagonal number that can be expressed as the sum of two
    pentagonal numbers in two different ways:
    P_49 = 3577 = 3432 + 145 = P_48 + P_10
                 = 3290 + 287 = P_47 + P_14

    107602 is the smallest pentagonal number that can be expressed as the sum of two
    pentagonal numbers in three different ways.

    Find the smallest pentagonal number that can be expressed as the sum of two
    pentagonal numbers in over 100 different ways.

URL: https://projecteuler.net/problem=799
"""
from typing import Any

euler_problem: int = 799
framework_version: str = "0.0.1"
test_cases: list[dict[str, Any]] = [
    {'category': 'main', 'input': {}, 'answer': None},
]
encrypted: str = (
    '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'
)

if __name__ == '__main__':
    from euler_solver.framework import evaluate, logger
    logger.setLevel('ERROR')
    raise SystemExit(evaluate(euler_problem=euler_problem, time_out_in_seconds=300))

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Project Euler Problem 2: Even Fibonacci Numbers.

Problem Statement:
    Each new term in the Fibonacci sequence is generated by adding the previous two
    terms. By starting with 1 and 2, the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not exceed four
    million, find the sum of the even-valued terms.

Solution Approach:
    Generate the Fibonacci sequence efficiently up to the max limit.
    Use the property that every third Fibonacci number is even.
    Sum the even Fibonacci numbers up to the given limit.
    Time complexity is O(N) where N is the number of Fibonacci terms up to the limit.

Answer: 4613732
URL: https://projecteuler.net/problem=2
"""
from __future__ import annotations

from typing import Any, Generator

from euler_solver.framework import evaluate, logger, register_solution

euler_problem: int = 2
framework_version: str = '0.2.1'
test_cases: list[dict[str, Any]] = [
    {'category': 'dev', 'input': {'max_limit': 10}, 'answer': 10},
    {'category': 'dev', 'input': {'max_limit': 100}, 'answer': 44},
    {'category': 'main', 'input': {'max_limit': 4000000}, 'answer': 4613732},
]


@register_solution(euler_problem=euler_problem, max_test_case_index=None)
def solve_even_fibonacci_numbers_p0002_s0(*, max_limit: int) -> int:
    def _even_fibonacci_numbers() -> Generator[int, None, None]:
        even_fib_a, even_fib_b = (2, 8)
        while even_fib_a < max_limit:
            yield even_fib_a
            even_fib_a, even_fib_b = (even_fib_b, 4 * even_fib_b + even_fib_a)

    return sum(_even_fibonacci_numbers())


if __name__ == '__main__':
    logger.setLevel('ERROR')
    raise SystemExit(evaluate(euler_problem=euler_problem, time_out_in_seconds=300))

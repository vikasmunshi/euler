#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Project Euler Problem 44: Pentagon Numbers.

Problem Statement:
    Pentagonal numbers are generated by the formula, P_n = n(3n-1)/2. The first ten pentagonal
    numbers are:
    1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

    It can be seen that P_4 + P_7 = 22 + 70 = 92 = P_8. However, their difference, 70 - 22 = 48,
    is not pentagonal.

    Find the pair of pentagonal numbers, P_j and P_k, for which their sum and difference are
    pentagonal and D = |P_k - P_j| is minimised; what is the value of D?

Solution Approach:
    Use number theory and combinatorics to generate pentagonal numbers. Efficiently test if
    a number is pentagonal using a direct inverse formula or a search. Search for pairs (P_j, P_k)
    with both sum and difference pentagonal, minimizing difference D. Use optimized iteration
    and caching of pentagonal sets for quick membership testing.

Answer: 5482660
URL: https://projecteuler.net/problem=44
"""
from __future__ import annotations

from math import sqrt
from typing import Any

# from euler_solver.maths.polynomial_numbers import is_pentagonal_number, nth_pentagonal_number
from euler_solver.framework import evaluate, logger, register_solution

euler_problem: int = 44
framework_version: str = '0.2.1'
test_cases: list[dict[str, Any]] = [
    {'category': 'main', 'input': {}, 'answer': 5482660},
]


def nth_pentagonal_number(n: int) -> int:
    return (n * (3 * n - 1)) // 2


def is_pentagonal_number(n: int) -> bool:
    return ((1 + sqrt(1 + 24 * n)) / 6).is_integer()


@register_solution(euler_problem=euler_problem, max_test_case_index=None)
def solve_pentagon_numbers_p0044_s0() -> int:
    i = 0
    while i := (i + 1):
        p_i = nth_pentagonal_number(i)
        for j in range(i - 1, 0, -1):
            p_j = nth_pentagonal_number(j)
            if is_pentagonal_number(p_i - p_j) and is_pentagonal_number(p_i + p_j):
                return p_i - p_j
    else:
        raise ValueError('No solution found')


if __name__ == '__main__':
    logger.setLevel('ERROR')
    raise SystemExit(evaluate(euler_problem=euler_problem, time_out_in_seconds=300))

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Project Euler Problem 45: Triangular, Pentagonal, and Hexagonal.

Problem Statement:
    Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

        Triangle
            T_n = n(n+1)/2
            1, 3, 6, 10, 15, ...
        Pentagonal
            P_n = n(3n - 1)/2
            1, 5, 12, 22, 35, ...
        Hexagonal
            H_n = n(2n - 1)
            1, 6, 15, 28, 45, ...

    It can be verified that T_285 = P_165 = H_143 = 40755.

    Find the next triangle number that is also pentagonal and hexagonal.

Solution Approach:
    Use properties of polygonal numbers and number theory.
    Note hexagonal numbers are a subset of triangular numbers.
    Check pentagonal numbers using inverse formula and integer check.
    Search efficiently for the next number after 40755.
    Complexity is manageable with direct iteration and checks.

Answer: 1533776805
URL: https://projecteuler.net/problem=45
"""
from __future__ import annotations

from typing import Any

from euler_solver.framework import evaluate, logger, register_solution

euler_problem: int = 45
framework_version: str = '0.2.1'
test_cases: list[dict[str, Any]] = [
    {'category': 'main', 'input': {'n': 285}, 'answer': 1533776805},
]


@register_solution(euler_problem=euler_problem, max_test_case_index=None)
def solve_triangular_pentagonal_and_hexagonal_p0045_s0(*, n: int) -> int:
    while n := (n + 1):
        triangular_number = n * (n + 1) // 2
        if (1 + 24 * triangular_number) ** 0.5 % 6 == 5.0:
            if (1 + 8 * triangular_number) ** 0.5 % 4 == 3.0:
                return triangular_number
    else:
        raise ValueError('No solution found')


if __name__ == '__main__':
    logger.setLevel('ERROR')
    raise SystemExit(evaluate(euler_problem=euler_problem, time_out_in_seconds=300))

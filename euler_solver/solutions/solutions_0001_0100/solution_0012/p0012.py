#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Project Euler Problem 12: Highly Divisible Triangular Number.

Problem Statement:
    The sequence of triangle numbers is generated by adding the natural numbers.
    So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
    ten terms would be:
    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:
    1: 1
    3: 1, 3
    6: 1, 2, 3, 6
    10: 1, 2, 5, 10
    15: 1, 3, 5, 15
    21: 1, 3, 7, 21
    28: 1, 2, 4, 7, 14, 28

    We can see that 28 is the first triangle number to have over five divisors.

    What is the value of the first triangle number to have over five hundred divisors?

Solution Approach:
    Use number theory and prime factorization to efficiently count divisors.
    Recognize that the nth triangle number is n*(n+1)/2. Factor n and n+1 separately,
    combine divisor counts, and check for the first exceeding 500 divisors. Use
    efficient trial division or a sieve for factoring. Aim for O(n log n) or better.

Answer: 76576500
URL: https://projecteuler.net/problem=12
"""
from __future__ import annotations

from typing import Any

from euler_solver.framework import evaluate, logger, register_solution
from euler_solver.lib_primes import num_factors

euler_problem: int = 12
framework_version: str = '0.2.1'
test_cases: list[dict[str, Any]] = [
    {'category': 'dev', 'input': {'num_divisors': 5}, 'answer': 28},
    {'category': 'main', 'input': {'num_divisors': 500}, 'answer': 76576500},
]


@register_solution(euler_problem=euler_problem, max_test_case_index=None)
def solve_highly_divisible_triangular_number_p0012_s0(*, num_divisors: int) -> int:
    i, triangle_number = 1, 1

    while True:
        # Split into two terms for efficiency
        if i % 2 == 0:
            factors_i = num_factors(i // 2)
            factors_next = num_factors(i + 1)
        else:
            factors_i = num_factors(i)
            factors_next = num_factors((i + 1) // 2)

        # Total divisors of the triangle number
        divisor_count = factors_i * factors_next
        if divisor_count > num_divisors:
            return triangle_number

        i += 1
        triangle_number = i * (i + 1) // 2


@register_solution(euler_problem=euler_problem, max_test_case_index=None)
def solve_highly_divisible_triangular_number_p0012_s1(*, num_divisors: int) -> int:
    i, triangle_number = (1, 1)
    while num_factors(triangle_number) < num_divisors:
        i += 1
        triangle_number = i * (i + 1) // 2
    return triangle_number


if __name__ == '__main__':
    logger.setLevel('ERROR')
    raise SystemExit(evaluate(euler_problem=euler_problem, time_out_in_seconds=300))

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Project Euler Problem 395: Pythagorean Tree.

Problem Statement:
    The Pythagorean tree is a fractal generated by the following procedure:
    Start with a unit square. Then, calling one of the sides its base (in the
    animation, the bottom side is the base):
    1) Attach a right triangle to the side opposite the base, with the
       hypotenuse coinciding with that side and with the sides in a 3-4-5
       ratio. Note that the smaller side of the triangle must be on the
       'right' side with respect to the base.
    2) Attach a square to each leg of the right triangle, with one of its
       sides coinciding with that leg.
    3) Repeat this procedure for both squares, considering as their bases the
       sides touching the triangle.
    The resulting figure, after an infinite number of iterations, is the
    Pythagorean tree.
    It can be shown that there exists at least one rectangle, whose sides are
    parallel to the largest square of the Pythagorean tree, which encloses the
    Pythagorean tree completely.
    Find the smallest area possible for such a bounding rectangle, and give
    your answer rounded to 10 decimal places.

URL: https://projecteuler.net/problem=395
"""
from typing import Any

euler_problem: int = 395
framework_version: str = "0.0.1"
test_cases: list[dict[str, Any]] = [
    {'category': 'main', 'input': {}, 'answer': None},
]
encrypted: str = (
    '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'
    'PsoSqslu7d5U7qOe'
)

if __name__ == '__main__':
    from euler_solver.framework import evaluate, logger
    logger.setLevel('ERROR')
    raise SystemExit(evaluate(euler_problem=euler_problem, time_out_in_seconds=300))
